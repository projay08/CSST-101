# -*- coding: utf-8 -*-
"""3A_LLAMANZARES_MP2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12dnysLiKJxqokp06liryIq4LQ3mMavuU

# 1. Basic Operations
"""

def and_operation(p, q):
    """Logical conjunction (AND)."""
    return p and q

def or_operation(p, q):
    """Logical disjunction (OR)."""
    return p or q

def not_operation(p):
    """Logical negation (NOT)."""
    return not p

def implies_operation(p, q):
    """Logical implication (IMPLIES)."""
    return not p or q

"""# 2. Evaluate Logical Statements
We can create a function that parses a string representation of the logical expression and evaluates it based on the provided truth values.
"""

def evaluate(statement, values):
    statement = statement.replace('AND', 'and').replace('OR', 'or').replace('NOT', 'not')

    try:
        return eval(statement, {}, values)
    except NameError as e:
        raise ValueError(f"Unknown token in statement: {e}")

"""# Example Usage
The function first replaces logical operators in the string (AND, OR, NOT) with their Python equivalents (and, or, not).

The eval() function then evaluates the logical expression using the provided truth values (variables) from the values dictionary.
"""

def evaluate(statement, values):
    statement = statement.replace('AND', 'and').replace('OR', 'or').replace('NOT', 'not')

    try:
        return eval(statement, {}, values)
    except NameError as e:
        raise ValueError(f"Unknown token in statement: {e}")

"""# Predicate Logic with Quantifiers
1. Universal Quantifier (∀)
The forall function checks if a given predicate holds true for all elements in a specified domain.
2. Existential Quantifier (∃)
The exists function checks if there is at least one element in the specified domain for which the predicate holds true.
Implementation
Here’s how you can implement these functions in Python:
"""

def forall(predicate, domain):
    """Evaluate the universal quantifier (FOR ALL)."""
    return all(predicate(x) for x in domain)

def exists(predicate, domain):
    """Evaluate the existential quantifier (EXISTS)."""
    return any(predicate(x) for x in domain)

"""# Example Usage of Quantifiers"""

def is_even(x):
    return x % 2 == 0

def is_positive(x):
    return x > 0

def forall(predicate, domain):
    return all(predicate(x) for x in domain)

def exists(predicate, domain):
    return any(predicate(x) for x in domain)

domain = range(-5, 6)

all_even = forall(is_even, domain)
print(f"All numbers are even: {all_even}")

any_even = exists(is_even, domain)
print(f"Any number is even: {any_even}")

all_positive = forall(is_positive, domain)
print(f"All numbers are positive: {all_positive}")

any_positive = exists(is_positive, domain)
print(f"Any number is positive: {any_positive}")

"""#**AI Agent Development**
a game scenario where the agent will decide whether to turn on the heater, turn on the air conditioner, or do nothing based on the current temperature, the target temperature, and any external factors such as windows being open.

The agent monitors the current room temperature and compares it to a target temperature.

If the temperature is too low, it turns on the heater.


If the temperature is too high, it turns on the air conditioner.


If windows are open, the agent adjusts its decision accordingly (e.g., don't turn on the heater if windows are open).

is_temperature_near_target(): Checks if the current temperature is within an acceptable range of the target temperature (a threshold is used to prevent constant switching).
"""

def is_temperature_near_target(current_temp, target_temp, threshold=1):
      return abs(current_temp - target_temp) <= threshold

def is_window_open(windows):
    return any(windows)

def decide_action(current_temp, target_temp, windows_open):

    if is_temperature_near_target(current_temp, target_temp):
        return "Do nothing"

    if is_window_open(windows_open):
        if current_temp < target_temp:
            return "Close windows to retain heat"
        else:
            return "Leave windows open for cooling"

    if current_temp < target_temp:
        return "Turn on heater"
    else:
        return "Turn on air conditioner"

current_temp = 18
target_temp = 22
windows_open = [False, True]

action = decide_action(current_temp, target_temp, windows_open)
print(f"The agent decides to: {action}")